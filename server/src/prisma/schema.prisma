generator client {
    provider      = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model User {
    id        String    @id @default(dbgenerated("gen_random_uuid()"))
    name      String
    email     String
    phone     String?
    gender    String?
    createdAt DateTime  @default(dbgenerated("timezone('utc', now())")) @map("created_at")
    updatedAt DateTime  @default(dbgenerated("timezone('utc', now())")) @updatedAt @map("updated_at")
    posts     Post[]
    votes     Vote[]
    comments  Comment[]
    media     Media[]
}

model Post {
    id            String    @id @default(dbgenerated("gen_random_uuid()"))
    authorId      String    @map("author_id")
    author        User      @relation(fields: [authorId], references: [id])
    title         String
    body          String?
    mediaId       String?
    createdAt     DateTime? @default(dbgenerated("timezone('utc', now())")) @map("created_at")
    updatedAt     DateTime? @default(dbgenerated("timezone('utc', now())")) @updatedAt @map("updated_at")
    commentCount  Int       @default(0) @map("comment_count")
    upvoteCount   Int       @default(0) @map("upvote_count")
    downvoteCount Int       @default(0) @map("downvote_count")
    votes         Vote[]
    comments      Comment[]
    media         Media[]
}

model Comment {
    id            String    @id @default(dbgenerated("gen_random_uuid()"))
    body          String
    postId        String    @map("post_id")
    post          Post      @relation(fields: [postId], references: [id])
    authorId      String    @map("author_id")
    author        User      @relation(fields: [authorId], references: [id])
    upvoteCount   Int       @default(0) @map("upvote_count")
    downvoteCount Int       @default(0) @map("downvote_count")
    votes         Vote[]
    createdAt     DateTime? @default(dbgenerated("timezone('utc', now())")) @map("created_at")
    updatedAt     DateTime? @default(dbgenerated("timezone('utc', now())")) @updatedAt @map("updated_at")
}

model Vote {
    id        String    @id @default(dbgenerated("gen_random_uuid()"))
    voteType  Int       @map("vote_type")
    voterId   String    @map("voter_id")
    voter     User      @relation(fields: [voterId], references: [id])
    postId    String?   @map("post_id")
    post      Post?     @relation(fields: [postId], references: [id])
    commentId String?   @map("comment_id")
    comment   Comment?  @relation(fields: [commentId], references: [id])
    createdAt DateTime? @default(dbgenerated("timezone('utc', now())")) @map("created_at")
    updatedAt DateTime? @default(dbgenerated("timezone('utc', now())")) @updatedAt @map("updated_at")

    @@unique([voterId, commentId])
    @@unique([voterId, postId])
}

model Media {
    id        String    @id @default(dbgenerated("gen_random_uuid()"))
    name      String
    size      Int
    type      String
    url       String
    postId    String    @map("post_id")
    post      Post      @relation(fields: [postId], references: [id])
    userId    String    @map("user_id")
    user      User      @relation(fields: [userId], references: [id])
    createdAt DateTime? @default(dbgenerated("timezone('utc', now())")) @map("created_at")
}
